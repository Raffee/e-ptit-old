@using Newtonsoft.Json

@model e_ptit_2.Models.PyramidViewModel
@{
    ViewBag.Title = "Բուրգ";
}

<script type="text/javascript">

    var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));

</script>

<div>

    <div id="sound">
    </div>

    <div id="fireworks-template">
        <div id="fw" class="firework"></div>
        <div id="fp" class="fireworkParticle">
            <img src="../../Content/fireworks/image/particles.gif" alt="" />
        </div>
    </div>

    <div id="fireContainer"></div>
</div>

<div class="row">
    <div class="row">
        <div class="col-md-12" style="text-align: center;">
            <h2>@Model.Pyramid.Title.ToUpperInvariant()</h2>
            <br />
            <h3>@Model.Pyramid.Description</h3>
        </div>
    </div>
    <br />

    <div class="row" style="background-color: #0c1f3f;">
        <div class="row rf-main-container">
            <div class="row">
                <div class="col-md-5"></div>
                <div id="rf-searchgamecontainer">
                    <table ID="tblMain" cellspacing='0' cellpadding='0' class='rf-tablestyle'>
                        @for (int i = 0; i < Model.Rows; i++)
                            {
                            <tr>
                                <td style="padding-left: @String.Format("{0}px", Model.padding);">
                                    <table class="rf-tablestyle crossword">
                                        <tr>
                                            @{
                                                    var items = Model.GetRowEntries(i);
                                                    Model.padding -= 40;
                                            }
                                            @foreach (var item in items)
                                                {
                                                    if (item.isShown)
                                                    {
                                                <td class="td-basic">@item.Value</td>
                                                    }
                                                    else
                                                    {
                                                <td class="td-basic">
                                                    <input type="text" id="@String.Format("{0}px", item.pkPyramidEntryId)" data-is-solved="false"
                                                           data-word="@item.Value" onblur="validateText(this)" class="txt-data" />
                                                </td>
                                                    }
                                                }
                                        </tr>

                                    </table>
                                </td>
                            </tr>
                            }
                    </table>
                </div>
            </div>
        </div>
        <div style="text-align: center;">
            <img src="../../Content/images/games/other/math/pyramid_bg_bottom.png" />
        </div>
    </div>
</div>

<audio id="myAudio">
    <source src="../../Content/audio/correct.mp3" type="audio/mp3" />
    Your browser does not support audio!
</audio>
<audio id="audioApplause">
    <source src="../../Content/audio/win.mp3" type="audio/mp3" />
    Your browser does not support audio!
</audio>
<audio id="audioSanta">
    <source src="../../Content/audio/tadaa1.wav" type="audio/wav" />
    Your browser does not support audio!
</audio>

@section scripts {
    <script type="text/javascript" src="../../Content/js/jquery-ui.js"></script>

    <script>

        if (typeof (soundManagerInit) != 'undefined') soundManagerInit();

        function DoFireworks() {
            var r = 4 + parseInt(Math.random() * 16);
            for (var i = r; i--;) {
                setTimeout('createFirework(50,200,4,null,null,null,null,null,Math.random()>0.5,true)', (i + 1) * (1 + parseInt(Math.random() * 1000)));
            }
            return false;
        }

        function playSound() {
            var vid = document.getElementById("myAudio");
            vid.play();
        }

        function playApplause() {
            var vid = document.getElementById("audioApplause");
            vid.play();
            var hohoho = document.getElementById("audioSanta");
            hohoho.play();
        }
        var www = JSON.parse(data.words);
        var firstText = "dataR" + www[0].row + "C" + www[0].col;
        EM.addEventListener(window, 'domload', function () {
            if(data.ShowKeyboard)
                VirtualKeyboard.toggle('some-id-data', 'td');
        });

        function validateText(inp) {
            debugger;
            if (inp.value.toLowerCase() == inp.attributes["data-word"].value.toLowerCase()) {
                if (inp.attributes["data-is-solved"] == "false") {
                    //inp.attributes["style"] += "border; 1px solid green;"
                    inp.attributes["readonly"] = "true";
                    inp.readonly = true;
                    inp.disable = true;
                    var txt = document.getElementById(inp.id);
                    txt.readonly = true;
                    txt.attributes["readonly"] = "true";
                    txt.readonly = true;
                    txt.disabled = true;

                    var txtJ = $('#' + inp.id);
                    txtJ.attr("data-is-solved", "true");
                    playSound();
                    checkIfCompleted();
                }
            }
            else
                inp.value = "";
        }

        function checkIfCompleted() {
            debugger;
            var toSolve = $("input[data-is-solved='false']");
            //alert(toSolve.length);
            if (toSolve.length == 0) {
                {
                    DoFireworks();
                    playApplause();
                }
            }
        }

        $(document).ready(function () {

            $(".txt-data").on("keydown", function (event) {
                if (event.keyCode == 13) {
                    event.preventDefault();
                    $(this).blur();
                }
            });

            $(".txt-data").on("keyup", function (event) {
                debugger;
                if (event.keyCode == 13) {
                }
                else {
                    var txt = $(event.target);
                    var text = txt.val();
                    var answer = txt.data("word").toString();
                    CheckAnswerWhileTyping(text, answer, txt);
                }
            });
        });

        function CheckAnswerWhileTyping(text, answer, thisObj) {
            if (thisObj.attr("data-is-solved") == "false" && text.toLowerCase() == answer.toLowerCase()) {
                playSound();
                document.getElementById(thisObj.attr('id')).style.borderColor = "green";
                thisObj.attr("data-is-solved", "true");
                thisObj.attr("readonly", "true");
                checkIfCompleted();
            }
        }

    </script>
}
@section styles {
    <link href="@($"/Content/css/jquery.pyramid-1.css")" rel="stylesheet" type="text/css" />
}
